/** Common function to select and generate a string.
    \file select_and_generate.h
    \author OOTA, Masato
    \copyright Copyright Â© 2024 OOTA, Masato
    \par License GPL-3.0-or-later
    \parblock
      This file is part of TPhrase.

      TPhrase is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      TPhrase is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.

      You should have received a copy of the GNU General Public License
      along with TPhrase.  If not, see <http://www.gnu.org/licenses/>.
    \endparblock
*/

#ifndef TPHRASE_SRC_SELECT_AND_GENERATE_H_
#define TPHRASE_SRC_SELECT_AND_GENERATE_H_

#include <algorithm>
#include <cmath>
#include <vector>

#include "tphrase/common/ext_context.h"
#include "random.h"

namespace tphrase {

    /** Select an item, and a string is generated by it.
        \tparam T The type of the items.
        \param [in] target A set from which an item is selected.
        \param [in] weights weights[i] is the sum of weights[i-1] and the weight to select target[i].
        \param [in] equalized_chance Equalize the chance to select the items.
        \param [in] ext_context The external context that has some nonterminals and the substitutions.
        \return The generated string.
    */
    template<typename T>
    std::string
    select_and_generate(const std::vector<T> &target,
                        const std::vector<double> &weights,
                        const bool equalized_chance,
                        const ExtContext_t &ext_context)
    {
        if (target.empty()) {
            return "nil";
        } else if (target.size() == 1) {
            return target[0].generate(ext_context);
        } else {
            double r{random()};
            size_t i{0};
            if (equalized_chance) {
                i = std::floor(r * target.size());
            } else {
                r *= weights.back();
                const auto it = std::lower_bound(weights.cbegin(), weights.cend(), r);
                i = it - weights.cbegin();
                if (i >= target.size()) {
                    i = 0;
                }
            }
            return target[i].generate(ext_context);
        }
    }
}

#endif // TPHRASE_SRC_SELECT_AND_GENERATE_H_
